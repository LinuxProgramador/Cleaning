from tkinter import *
from PIL import ImageTk, Image
from tkinter import messagebox
from tkinter.filedialog import askopenfilename
from cryptography.fernet import Fernet
import sys
from os import remove, chdir, urandom
import pkg_resources

# Herramienta de eliminación segura de archivos en (Linux/Windows/macOS)


def delete_local():
    #Permite borrar los datos ingresados por el usuario en las etiquetas
    path_entry.delete(0,END)
    path_file_entry.delete(0,END)



def submit_local():
    #Encripta y sobrescribe los datos del usuario y despues los borra
    try:
        path = path_entry.get()
        path_file = path_file_entry.get()
        
        chdir(path)

        salt = urandom(512)
        key = Fernet.generate_key()
        fernet = Fernet(key)
        key = salt

        with open(path_file, 'rb') as file_local:
            file_read = file_local.read()

        encryption = fernet.encrypt(file_read)
        fernet = salt

        with open(path_file, 'wb') as file_local_write:
            file_local_write.write(encryption)

        remove(path_file)

        messagebox.showinfo("Confirmation", "File safely deleted!")

    except FileNotFoundError:
        messagebox.showinfo("ERROR", "Non-existent route!")

    except PermissionError:
        messagebox.showinfo("ERROR", "You do not have permissions on that file!")


def about_tool():
    messagebox.showinfo("About", "Cleaning: is a tool that allows you to safely delete multimedia files.")


def exit_tool():
    exit_ask = messagebox.askquestion("EXIT", "Do you want to exit Cleaning?")
    if exit_ask == "yes":
        window.quit()
        window.destroy()


def main():
    global window, path_entry, path_file_entry
    
    window = Tk()
    window.title("Cleaning")
    window.geometry("600x500")
    icon_path = pkg_resources.resource_filename(__name__, "clear.ico")
    window.iconbitmap(icon_path)

    # Configuración del fondo
    background_path = pkg_resources.resource_filename(__name__, "fondo.gif")
    background = PhotoImage(file=background_path)
    background_label = Label(window, image=background)
    background_label.place(x=0, y=0, relwidth=1, relheight=1)

    # Menú
    menu = Menu(window)
    window.config(menu=menu)

    file_menu = Menu(menu, tearoff=0)
    file_menu.add_command(label="About", command=about_tool)
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=exit_tool)
    menu.add_cascade(label="File", menu=file_menu)

    # Entradas de texto
    path_label = Label(window, text="Directory Path:", bg="grey")
    path_label.pack()
    path_entry = Entry(window, bg="grey",width=25)
    path_entry.pack()

    path_file_label = Label(window, text="File Name:", bg="grey")
    path_file_label.pack()
    path_file_entry = Entry(window, bg="grey",width=25)
    path_file_entry.pack()

    # Botón para ejecutar submit_local y delete_local
    submit_button = Button(window, text="Submit", command=submit_local)
    submit_button.pack()

    submit_delete= Button(window, text="Delete", command=delete_local)
    submit_delete.pack()

    window.mainloop()


if __name__ == "__main__":
    main()


__name__ = "cleaning"
__version__ = "1.0"
__author__ = "WhiteHack"
__status__ = "Finish"
